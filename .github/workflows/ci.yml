name: CI/CD Pipeline

on: [push]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: (1 of 8) - Checkout code
        uses: actions/checkout@v2

      - name: (2 of 8) - Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: (3 of 8) -  Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
         

      - name: (4 of 8) Lint code with flake8
        run: |
          flake8 . --exclude=./venv,./.venv,./ENV,./env,.git,__pycache__ || true
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: (5 of 8 ) Run unit tests with pytest
        run: pytest tests/

      - name: (6 of 8) - Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/iris-api .
          docker tag ${{ secrets.DOCKER_USERNAME }}/iris-api iris-api

      - name: (7 of 8) - Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/iris-api

      - name: (8 of 8) - Run  container and verify /docs endpoints
        run: |
          # Start container in background and map port 8000
          docker run -d -p 8000:8000 --name iris-api ${{ secrets.DOCKER_USERNAME }}/iris-api
          
          # Give the server time to start
          sleep 5
          
          # Check if the /docs endpoint responds
          curl -f http://localhost:8000/docs || (echo " X /docs endpoint did not respond" && exit 1)
          
          # Print logs for reference
          docker logs iris-api
          
          # Stop and remove container so job finishes
          docker stop iris-api
          docker rm iris-api
